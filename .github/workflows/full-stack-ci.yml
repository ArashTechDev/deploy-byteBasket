# .github/workflows/full-stack-ci.yml
name: Full Stack CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bytebasket_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Setup test database
      run: |
        psql -h localhost -U postgres -d bytebasket_test -f src/models/migrations/init.sql
      env:
        PGPASSWORD: testpassword
    
    - name: Run backend tests
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: bytebasket_test
        DB_USER: postgres
        DB_PASSWORD: testpassword
        JWT_SECRET: test-secret-key

  frontend-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Run frontend tests
      run: npm test -- --coverage --passWithNoTests --watchAll=false
      env:
        CI: true
    
    # - name: Build frontend
    #   run: npm run build

  integration-test:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bytebasket_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Setup test database
      run: |
        cd backend
        psql -h localhost -U postgres -d bytebasket_test -f src/models/migrations/init.sql
      env:
        PGPASSWORD: testpassword
    
    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: bytebasket_test
        DB_USER: postgres
        DB_PASSWORD: testpassword
        JWT_SECRET: test-secret-key
        PORT: 3001
    
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: bytebasket_test
        DB_USER: postgres
        DB_PASSWORD: testpassword
        JWT_SECRET: test-secret-key